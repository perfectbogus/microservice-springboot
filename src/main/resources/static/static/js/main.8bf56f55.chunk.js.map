{"version":3,"sources":["services/ApiClient.js","components/ChallengeComponent.js","App.js","reportWebVitals.js","index.js"],"names":["ApiClient","fetch","SERVER_URL","GET_CHALLENGE","user","a","b","guess","POST_RESULT","method","headers","body","JSON","stringify","userAlias","factorA","factorB","ChallengeComponent","props","state","message","handleSubmitResult","bind","handleChange","challenge","then","res","ok","json","setState","updateMessage","event","name","target","this","value","preventDefault","sendGuess","correct","resultAttempt","m","onSubmit","type","maxLength","onChange","min","React","App","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"8QAAMA,E,8FAKJ,WACE,OAAOC,MAAMD,EAAUE,WAAaF,EAAUG,iB,uBAGhD,SAAiBC,EACAC,EACAC,EACAC,GACf,OAAON,MAAMD,EAAUE,WAAaF,EAAUQ,YAAa,CACzDC,OAAQ,OACRC,QAAS,CACP,eAAgB,oBAElBC,KAAMC,KAAKC,UACT,CACEC,UAAWV,EACXW,QAASV,EACTW,QAASV,EACTC,MAAOA,U,KAvBXP,EACGE,WAAa,wBADhBF,EAEGG,cAAgB,qBAFnBH,EAGGQ,YAAc,YA2BRR,Q,OCwEAiB,E,kDAjGb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CACXd,EAAG,GAAIC,EAAG,GACVF,KAAM,GAAIgB,QAAS,GACnBb,MAAO,GAET,EAAKc,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,qDAWnB,WAA2B,IAAD,OACxBtB,EAAUwB,YAAYC,MACpB,SAAAC,GACMA,EAAIC,GACND,EAAIE,OAAOH,MAAK,SAAAG,GACd,EAAKC,SAAS,CACZxB,EAAGuB,EAAKb,QACRT,EAAGsB,EAAKZ,aAIZ,EAAKc,cAAc,+B,0BAM3B,SAAaC,GACX,IAAMC,EAAOD,EAAME,OAAOD,KAC1BE,KAAKL,SAAL,eACGG,EAAOD,EAAME,OAAOE,U,gCAIzB,SAAmBJ,GAAQ,IAAD,OACxBA,EAAMK,iBACNpC,EAAUqC,UACRH,KAAKf,MAAMf,KACX8B,KAAKf,MAAMd,EACX6B,KAAKf,MAAMb,EACX4B,KAAKf,MAAMZ,OACXkB,MAAK,SAAAC,GACCA,EAAIC,GACND,EAAIE,OAAOH,MAAK,SAAAG,GACVA,EAAKU,QACP,EAAKR,cAAc,kCAEnB,EAAKA,cAAc,mBAAqBF,EAAKW,cAAgB,mCAIjE,EAAKT,cAAc,6C,2BAK3B,SAAcU,GACZN,KAAKL,SAAS,CACZT,QAASoB,M,oBAIb,WACE,OACE,gCACE,gCACE,uDACA,+BACGN,KAAKf,MAAMd,EADd,MACoB6B,KAAKf,MAAMb,QAGjC,uBAAMmC,SAAUP,KAAKb,mBAArB,UACE,gDAEE,uBAAOqB,KAAK,OAAOC,UAAU,KACtBX,KAAK,OACLG,MAAOD,KAAKf,MAAMf,KAClBwC,SAAUV,KAAKX,kBAExB,uBACA,gDAEE,uBAAOmB,KAAK,SAASG,IAAI,IAClBb,KAAK,QACLG,MAAOD,KAAKf,MAAMZ,MAClBqC,SAAUV,KAAKX,kBAExB,uBACA,uBAAOmB,KAAK,SAASP,MAAM,cAE7B,6BAAKD,KAAKf,MAAMC,iB,GA7FS0B,aCWlBC,MAVf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,wBAAQA,UAAU,aAAlB,SACE,cAAC,EAAD,SCIOC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.8bf56f55.chunk.js","sourcesContent":["class ApiClient {\n  static SERVER_URL = 'http://localhost:8080';\n  static GET_CHALLENGE = '/challenges/random';\n  static POST_RESULT = '/attempts';\n\n  static challenge(): Promise<Response> {\n    return fetch(ApiClient.SERVER_URL + ApiClient.GET_CHALLENGE);\n  }\n\n  static sendGuess(user: string,\n                   a: number,\n                   b: number,\n                   guess: number): Promise<Response> {\n    return fetch(ApiClient.SERVER_URL + ApiClient.POST_RESULT, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'Application/json'\n      },\n      body: JSON.stringify(\n        {\n          userAlias: user,\n          factorA: a,\n          factorB: b,\n          guess: guess\n        }\n      )\n    });\n  }\n}\n\nexport default ApiClient;","import * as React from \"react\";\nimport ApiClient from \"../services/ApiClient\";\n\nclass ChallengeComponent extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      a: '', b: '',\n      user: '', message: '',\n      guess: 0\n    };\n    this.handleSubmitResult = this.handleSubmitResult.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  componentDidMount(): void {\n    ApiClient.challenge().then(\n      res => {\n        if (res.ok) {\n          res.json().then(json => {\n            this.setState({\n              a: json.factorA,\n              b: json.factorB\n            });\n          });\n        } else {\n          this.updateMessage(\"Can't reach the server\");\n        }\n      }\n    )\n  }\n\n  handleChange(event) {\n    const name = event.target.name;\n    this.setState({\n      [name]: event.target.value\n    });\n  }\n\n  handleSubmitResult(event) {\n    event.preventDefault();\n    ApiClient.sendGuess(\n      this.state.user,\n      this.state.a,\n      this.state.b,\n      this.state.guess\n    ).then(res => {\n        if (res.ok) {\n          res.json().then(json => {\n            if (json.correct) {\n              this.updateMessage(\"Congrats Your Guess is correct\");\n            } else {\n              this.updateMessage(\"Oops! Your guess\" + json.resultAttempt + \" is wrong, but keep playing!\");\n            }\n          });\n        } else {\n          this.updateMessage(\"Error: server error or not available\");\n        }\n      });\n  }\n\n  updateMessage(m: string) {\n    this.setState({\n      message: m\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <div>\n          <h3>Your new challenge is</h3>\n          <h1>\n            {this.state.a} x {this.state.b}\n          </h1>\n        </div>\n        <form onSubmit={this.handleSubmitResult}>\n          <label>\n            Your alias:\n            <input type=\"text\" maxLength=\"12\"\n                   name=\"user\"\n                   value={this.state.user}\n                   onChange={this.handleChange}/>\n          </label>\n          <br/>\n          <label>\n            Your guess:\n            <input type=\"number\" min=\"0\"\n                   name=\"guess\"\n                   value={this.state.guess}\n                   onChange={this.handleChange}/>\n          </label>\n          <br/>\n          <input type=\"submit\" value=\"Submit\"/>\n        </form>\n        <h4>{this.state.message}</h4>\n      </div>\n    );\n  }\n}\n\nexport default ChallengeComponent","import React from 'react';\nimport './App.css'\nimport ChallengeComponent from \"./components/ChallengeComponent\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <ChallengeComponent/>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}